apply from: "$rootDir/config/gradle/artifactory.gradle"

apply plugin: 'java'
apply plugin: 'project-report'
apply plugin: 'idea'
apply plugin: 'eclipse'

// Dependencies needed for what our Gradle scripts themselves use. It cannot be included via an external Gradle file :-(
buildscript {
    repositories {
        // External libs - jcenter is Bintray and is supposed to be a superset of Maven Central, but do both just in case
        jcenter()
        mavenCentral()
    }

    dependencies {
        // Artifactory plugin
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.0.0')
    }
}

ext {
    dirConfigMetrics = 'config/metrics'
    generatorClassName = 'org.terasology.math.generator.MathGeneratorRunner'
    generatedSrcDir = 'src/generated/java'

    // Read environment variables, including variables passed by jenkins continuous integration server
    env = System.getenv()
}

// Declare remote repositories we're interested in - library files will be fetched from here
repositories {
    // Main Maven repo
    mavenCentral()

    // MovingBlocks Artifactory instance for libs not readily available elsewhere plus our own libs
    maven {
        url "http://artifactory.terasology.org/artifactory/virtual-repo-live"
    }
}

sourceSets {
    main {
        java {
            srcDir generatedSrcDir
        }
    }
    generator {
        java {
            srcDir 'src/generator/java'
        }
        resources {
            srcDir 'src/generator/resources'
        }
    }
}

configurations {
    codeMetrics
}

task extractConfig (type: Copy) {
    description = "Extracts our configuration files from the zip we fetched as a dependency"
    from {
        configurations.codeMetrics.collect {
            zipTree(it)
        }
    }
    into "$rootDir/$dirConfigMetrics"
}

// Primary dependencies definition
dependencies {
    checkstyle ('com.puppycrawl.tools:checkstyle:6.14.1')
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'
    compile group: 'com.google.guava', name: 'guava', version: '18.0'

    compile 'org.joml:joml:1.9.11'

    generatorCompile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'
    generatorCompile group: 'com.google.guava', name: 'guava', version: '18.0'
    generatorCompile group: 'org.antlr', name: 'ST4', version: '4.0.8'

    // These dependencies are only needed for running tests
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.3'

    codeMetrics group: 'org.terasology.config', name: 'codemetrics', version: '1.2.0', ext: 'zip'

}

// Set the expected module Java level (can use a higher Java to run, but should not use features from a higher Java)
sourceCompatibility = 1.8
targetCompatibility = 1.8

//task generateSources(type:JavaExec) {
//    dependsOn compileGeneratorJava
//    outputs.dir file(generatedSrcDir)
    
//    main = generatorClassName
//    workingDir = rootDir
//    String[] runArgs = []
//    args runArgs

//    classpath sourceSets.generator.output.classesDir
//    classpath sourceSets.generator.runtimeClasspath
//}

//compileJava.dependsOn generateSources

clean {
    // the clean task should delete the folder, because it is the
    // output folder of generateSources, but it doesn't do it.
    delete generatedSrcDir
}

// Library and distribution config
group = 'org.terasology'
description = 'A math / geometry library'
// project name must be defined in a separate settings.gradle file

// Beyond the common Java setup this project also has some generated source files to add in
sourceJar.dependsOn generateSources

// TODO: Temporary until javadoc has been fixed for Java 8 everywhere
javadoc {
    failOnError = false
}

// Setup IntelliJ-IDEA
idea {
    project {
        jdkName = '1.8'
        languageLevel = 'JDK_1_8'

        ipr {
            withXml { xmlProvider ->
                def iprNode = xmlProvider.asNode()

                ideaActivateGit(iprNode)
                ideaActivateCheckstyle(iprNode)
                ideaActivateCopyright(iprNode)
            }
        }
    }

    module {
        // Exclude Gradle dir
        excludeDirs += file('gradle')

        // Exclude Eclipse dirs
        excludeDirs += file('bin')
        excludeDirs += file('.settings')

        // Add another source set
        sourceDirs += sourceSets.generator.allJava.srcDirs

        // Add the dependencies from the generator compile config
        scopes.PROVIDED.plus += [ configurations.generatorCompile ]
    }

    workspace {
        iws {
            withXml { xmlProvider ->
                def iwsNode = xmlProvider.asNode()

                ideaMakeAutomatically(iwsNode)
            }
        }
    }
}

ideaModule.dependsOn generateSources

ext {

    // Activate 'git' as VCS
    ideaActivateGit = { Node iprNode ->
        def vcsMappings = iprNode.component.find { it.'@name' == 'VcsDirectoryMappings' }
        vcsMappings.mapping.@vcs = 'Git'
    }

    // Activate and config 'Checkstyle' plugin
    ideaActivateCheckstyle = { Node iprNode ->
        def checkstyle = iprNode.component.find { it.'@name' == 'CheckStyle-IDEA' }
        if (checkstyle == null) {
            // Create new CheckStyle component
            checkstyle = iprNode.appendNode('component', [name: 'CheckStyle-IDEA'])
            // use NodeBuilder to create the config block in the xml structure
            def builder = new NodeBuilder()
            def option = builder.option(name: 'configuration') {
                map {
                    entry(key: 'active-configuration',
                            value: 'PROJECT_RELATIVE:$PROJECT_DIR$/config/metrics/checkstyle/checkstyle.xml:TeraMath CheckStyle')
                    entry(key: 'check-nonjava-files', value: false)
                    entry(key: 'check-test-classes', value: true)
                    entry(key: 'location-0',
                            value: 'CLASSPATH:/sun_checks.xml:The default CheckStyle rules')
                    entry(key: 'location-1',
                            value: 'PROJECT_RELATIVE:$PROJECT_DIR$/config/metrics/checkstyle/checkstyle.xml:TeraMath CheckStyle')
                    entry(key: 'property-1.samedir', value: 'config/metrics/checkstyle')
                    entry(key: 'suppress-errors', value: false)
                    entry(key: 'thirdparty-classpath', value: '')
                }
            }
            // Add result from NodeBuilder
            checkstyle.append option
        }
    }

    // Activate copyright conventions
    ideaActivateCopyright = { Node iprNode ->
        // Setup copyright statement injection
        def copyrightManager = iprNode.find { it.@name == 'CopyrightManager' }
        copyrightManager.@default = "TerasologyEngine"
        def copyright = copyrightManager.appendNode("copyright")
        copyright.appendNode("option", [name: "notice", value: 'Copyright ' + Calendar.getInstance().get(Calendar.YEAR) + ' MovingBlocks\n\nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.'])
        copyright.appendNode("option", [name: "keyword", value: "Copyright"])
        copyright.appendNode("option", [name: "allowReplaceKeyword", value: ""])
        copyright.appendNode("option", [name: "myName", value: "TerasologyEngine"])
        copyright.appendNode("option", [name: "myLocal", value: "true"])
        def langOptions = copyrightManager.appendNode("LanguageOptions", [name: "__TEMPLATE__"])
        langOptions.appendNode("option", [name: "addBlankAfter", value: "false"])
    }

    // Enable "make project automatically"
    ideaMakeAutomatically = { Node iwsNode ->
        def compilerWsConf = iwsNode.find { it.'@name' == 'CompilerWorkspaceConfiguration' }
        if (compilerWsConf == null) {
            compilerWsConf = iwsNode.appendNode('component', [name: 'CompilerWorkspaceConfiguration'])
            compilerWsConf.appendNode("option", [name: "MAKE_PROJECT_ON_SAVE", value: "true"])
        }
    }

}

// Make sure our config file for code analytics get extracted (vulnerability: non-IDE execution of single analytic)
ideaModule.dependsOn rootProject.extractConfig
tasks.eclipse.dependsOn rootProject.extractConfig
check.dependsOn rootProject.extractConfig
